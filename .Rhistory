R
myString <- "hello world"
myString
myString+'c'
myString+"c"
print(myString)
ls
Rscript test.R
Rscript test.R
Rscript test.R
myString="la nave va"
print(myString)
print(myString)
v<-TRUE
V
v
print(class(v))
v<-charToRaw("Hello")
v
print(cat)
doSth()
countdown(5)
countdown <- function(from)
{
print(from)
while(from!=0)
{
Sys.sleep(1)
from <- from - 1
print(from)
}
}
countdown(5)
ls
u=read_csv('/home/jesus/R/titanic/test.csv')
countdown(5)
print a
a<-13
print a
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
source('~/R/test.R')
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
print(a)
a<-13
a<-13
a <- a*5
print(a)
source('~/R/test.R')
ls()
a
countdown()
countdown(3)
countdown(100)
ls(pat="t")
rm *
rm
rm
rm a
rm(*)
rm(a)
rm(myString)
rm(v)
rm(countdown())
rm(countdown
)
source('~/R/test.R')
source('~/R/test.R')
source('~/R/test.R')
source('~/R/test.R')
c
a
a+1
a*2
log(a)
source('~/R/test.R')
source('~/R/test.R')
source('~/R/test.R')
source('~/R/test.R')
source('~/R/test.R')
a
source('~/R/test.R')
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
x<- -1:3
x
rpe(x,times=10)
rep(x,times=10)
rep(x,times=10)[1]
rep(x,times=10)[0]
rep(x,times=10)[-1]
install.packages('CausalImpact')
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
ls()
source('~/R/test.R', echo=TRUE)
x=rnorm(100)
y=rnorm(100)+2*x
plot(x,y)
plot(x,y)
5+4i
-4i
sqrt(-4i)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
plot(datos1$x,datos1$y)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
regresion
sumary(regresion)
summary(regresion)
source('~/R/test.R', echo=TRUE)
source('~/R/test.R', echo=TRUE)
install.packages("swirl", dependencies = TRUE)
library("swirl")
library(swirl)
install.packages(swirl, dependencies = TRUE)
library(swirl)
library("swirl")
faithful$waiting
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='gscitio',
token='FADC0A479A27715EDBE8A73A24F395BD',
secret='MUZNOo1ZmohlentGPAD1lIWgs6uwiw637Kj/RlgR')
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
library(rsconnect)
library(rsconnect)
install.packages("rsconnect")
library(rsconnect)
library('rsconnect')
devtools::install_github("rstudio/rsconnect"),
devtools::install_github("rstudio/rsconnect")
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
install.packages("devtools")
library(rsconnect)
install.packages("rsconnect")
install.packages("openssl-dev")
install.packages(c("BH", "bindr", "bindrcpp", "digest", "htmlwidgets", "httpuv", "leaflet", "plogr", "Rcpp", "reshape2", "rlang", "sourcetools", "sp", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "viridis", "viridisLite", "yaml"))
library(rsconnect)
install.packages(rsconnect)
install.packages("rsconnect")
install.packages("openssl")
install.packages("rsconnect")
install.packages("rsconnect")
library(rsconnect)
library('rsconnect')
rsconnect::setAccountInfo(name='gscitio',
token='FADC0A479A27715EDBE8A73A24F395BD',
secret='<SECRET>')
library('rsconnect')
rsconnect::setAccountInfo(name='gscitio',
token='FADC0A479A27715EDBE8A73A24F395BD',
secret='MUZNOo1ZmohlentGPAD1lIWgs6uwiw637Kj/RlgR')
install.packages("shiny")
shiny::runApp('Dropbox/motos/dashboard-shiny')
rsconnect::deployApp('../jesus/Dropbox/motos/dashboard-shiny/server.R')
rsconnect::deployApp('../jesus/Dropbox/motos/dashboard-shiny/')
runApp('Dropbox/motos/dashboard-shiny')
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=19.42344, lat=-99.16323, popup="The birthplace of R")
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")
m
shiny::runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
m <- fitBounds(-99,-98,19,20)
m <- fitBounds(.,-99,-98,19,20)
fitBounds(m,-99,-98,19,20)
fitBounds(m,19,20,-99,-98)
fitBounds(m,19,20,-99,-98)
fitBounds(m,19,-99,20,-98)
fitBounds(m,-99,19,-98,20)
fitBounds(m,-99.2426,19.3502,-99.0993,19.4664)
runApp('Documentos/git/shiny')
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)
runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
install.packages('maptools')
runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
shiny::runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
runApp('Documentos/git/shiny')
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addPoints(data = estaciones)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addPoints(.,data = estaciones)
leaflet() %>% addCircles(data=estaciones)
estaciones  = read.csv("data/estaciones_finales/s.csv")
estaciones  = read.csv("data/estaciones_finales/s.csv")
setwd(dir = 'Documentos/git/shiny/')
estaciones  = read.csv("data/estaciones_finales/s.csv")
setwd(dir = 'Documentos/git/shiny/')
leaflet() %>% addCircles(data=estaciones)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addPoints(.,data = estaciones)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addCircles(.,data = estaciones)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addCircles(.,data = estaciones)
estaciones  = read.csv("data/estaciones_finales/s.csv")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addCircles(.,data = estaciones)
estaciones  = read.csv("data/estaciones_finales/s.csv")
crswgs84=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addCircles(.,data = estaciones)
leaflet() %>% addCircles(data=estaciones)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-99.16323, lat=19.42344, popup="The birthplace of R")%>%
fitBounds(.,-99.2426,19.3502,-99.0993,19.4664)%>%
addCircles(.,data = estaciones)
m
runApp()
runApp()
runApp()
runApp('~/Documentos/git/shiny-examples/063-superzip-example')
shiny::runApp()
# Load packages ----
library(shiny)
library(maps)
library(mapproj)
library(leaflet)
library(PBSmapping)
Load data ----
# Source helper functions -----
source("helpers.R")
# User interface ----
ui <- fluidPage(
titlePanel("censusVis"),
sidebarLayout(
sidebarPanel(
helpText("Create demographic maps with
information from the 2010 US Census."),
selectInput("var",
label = "Choose a variable to display",
choices = c("Percent White", "Percent Black",
"Percent Hispanic", "Percent Asian"),
selected = "Percent White"),
sliderInput("range",
label = "Range of interest:",
min = 0, max = 100, value = c(0, 100))
),
mainPanel(m)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinythemes")
runApp()
runApp()
